/*
 * This file is part of Applied Energistics 2.
 * Copyright (c) 2013 - 2015, AlgorithmX2, All rights reserved.
 *
 * Applied Energistics 2 is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Applied Energistics 2 is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with Applied Energistics 2.  If not, see <http://www.gnu.org/licenses/lgpl>.
 */

buildscript {
    dependencies {
        // Fix for the shadow plugin using outdated ASM
        classpath 'org.ow2.asm:asm:9.5'
        classpath 'org.ow2.asm:asm-commons:9.5'
    }
}

plugins {
    id "net.neoforged.moddev"
    id "maven-publish"
    id "com.diffplug.spotless"
    id 'io.github.goooler.shadow'
    id "de.undercouch.download"
}

apply plugin: ProjectDefaultsPlugin

base {
    archivesName = "aeguide"
}

sourceSets {
    main {

    }
    buildtools
}

configurations {
    localRuntimeOnly
    shaded {
        transitive = false
    }
    buildtoolsImplementation.extendsFrom(compileClasspath)
    // Dependencies only used for the guide export, but not shipped
    guideExportOnly
    configurations.compileClasspath.extendsFrom(guideExportOnly)
    configurations.runtimeClasspath.extendsFrom(guideExportOnly)

    runtimeClasspath.extendsFrom localRuntimeOnly
}

import appengbuild.*
import com.diffplug.gradle.spotless.JsonExtension

dependencies {
    // To be copied into the jar file
    shaded project(path: ':libs:markdown', configuration: "archives")
    shaded "io.methvin:directory-watcher:${directory_watcher_version}"
    shaded "org.yaml:snakeyaml:${snakeyaml_version}"

    implementation(project(':libs:markdown')) {
        transitive = false
    }
    // Do not inherit any transitive dependencies here since we rely on those dependencies being
    // present in Minecrafts own dependencies already.
    implementation("io.methvin:directory-watcher:${directory_watcher_version}") {
        transitive = false
    }
    implementation("org.yaml:snakeyaml:${snakeyaml_version}") {
        transitive = false
    }
    // Used for the guide export
    guideExportOnly("org.bytedeco:ffmpeg-platform:${ffmpeg_version}")

    compileOnly 'org.apache.commons:commons-configuration2:2.9.0'

    buildtoolsImplementation 'de.siegmar:fastcsv:2.1.0'
    buildtoolsImplementation 'com.google.code.gson:gson:2.8.9'
}

///////////////////
// Version Number
ext.tag = System.getenv('TAG') ?: ""
if (ext.tag) {
    if (!ext.tag.startsWith("neoforge/v")) {
        throw new GradleException("Tags for the neoforge version should start with neoforge/: ${ext.tag}")
    }

    project.version = ext.tag.substring("neoforge/v".length())
} else {
    // This essentially tries to implement delay expansion of the project version based on a value source to
    // still support configuration caching.
    project.version = providers.gradleProperty("version").orElse("").flatMap(version -> {
        if (!version.isBlank()) {
            return providers.provider { version }
        }
        return providers.of(ProjectVersionSource.class, spec -> {
            spec.getParameters().getDefaultBranches().addAll("main", "neoforge/" + project.minecraft_version)
        });
    }).get()
}

tasks.register("printProjectVersion", PrintProjectVersion.class);

dependencies {
    buildtoolsImplementation 'de.siegmar:fastcsv:2.1.0'
    buildtoolsImplementation 'com.google.code.gson:gson:2.8.9'
}

/**
 * Configures properties common to all run configurations
 */
Map<String, String> commonSystemProperties = [
        'forge.logging.console.level': 'debug',
        'appeng.tests'               : 'true',
]

neoForge {
    version = project.neoforge_version

    mods {
        ae2 {
            sourceSet sourceSets.main
        }
    }

    runs {
        configureEach {
            gameDirectory = project.file('run')
            systemProperties = commonSystemProperties
            // property "mixin.debug.export", "true"

            additionalRuntimeClasspathConfiguration.extendsFrom configurations.shaded
            additionalRuntimeClasspathConfiguration.extendsFrom configurations.guideExportOnly
        }
        client {
            client()
            systemProperties = [
                    *                          : commonSystemProperties,
                    "appeng.tests"             : "true",
                    "guideDev.ae2guide.sources": file("guidebook").absolutePath,
            ]
        }
        guide {
            client()
            systemProperties = [
                    "guideDev.ae2guide.sources"    : file("guidebook").absolutePath,
                    "guideDev.ae2guide.startupPage": "ae2:index.md"
            ]
        }
        server {
            server()
        }
        data {
            data()
            programArguments = [
                    '--mod', 'ae2',
                    '--all',
                    '--output', file('src/generated/resources/').absolutePath,
                    '--existing', file('src/main/resources').absolutePath
            ]
        }
        guideexport {
            client()
            systemProperties = [
                    "appeng.runGuideExportAndExit": "true",
                    "appeng.guideExportFolder"    : file("$buildDir/guide").absolutePath,
                    "guideDev.ae2guide.sources"   : file("guidebook").absolutePath,
                    "appeng.version"              : project.version
            ]
        }
    }
}

//////////////
// Artifacts
Map<String, String> expansionVariables = [
        "project_version": project.version,
        'minecraft_version': project.minecraft_version_range,
        'neoforge_version': project.neoforge_version_range
]

processResources {
    exclude '.cache'
    // Ensure the resources get re-evaluate when the version changes
    for (var entry : expansionVariables.entrySet()) {
        inputs.property(entry.key, entry.value)
    }

    filesMatching("META-INF/neoforge.mods.toml") {
        expand expansionVariables
        filter { line ->
            line.replace('version="0.0.0"', "version=\"${expansionVariables['project_version']}\"")
        }
    }
}

jar {
    finalizedBy shadowJar
    archiveClassifier = "plain"
}

shadowJar {
    from sourceSets.main.output.classesDirs
    from sourceSets.main.output.resourcesDir

    from('guidebook') {
        into 'assets/ae2/ae2guide'
    }

    relocate "io.methvin", "appeng.shaded.methvin"
    relocate "org.yaml.snakeyaml", "appeng.shaded.snakeyaml"

    configurations = [project.configurations.shaded]
    archiveClassifier = null
}

assemble.dependsOn shadowJar

def publicApiIncludePatterns = {
    exclude "**/*Internal.*"
    exclude "**/*Internal\$*.*"
    include "appeng/api/**"
}

javadoc {
    source = sourceSets.main.allJava
    classpath = sourceSets.main.compileClasspath + sourceSets.main.output

    options.addStringOption('Xdoclint:none', '-quiet')
    options.encoding = 'UTF-8'
    options.charSet = 'UTF-8'
}
javadoc publicApiIncludePatterns

tasks.register('javadocJar', Jar) {
    dependsOn javadoc
    archiveClassifier = "javadoc"
    from javadoc.destinationDir
}

tasks.register('sourcesJar', Jar) {
    archiveClassifier = "sources"
    from sourceSets.main.allJava
}

tasks.register('apiJar', Jar) {
    archiveClassifier = "api"
    // api jar ist just a development aid and serves as both a binary and source jar simultaneously
    from sourceSets.main.output
    from sourceSets.main.allJava
    manifest {
        attributes("Fabric-Loom-Remap": true)
    }
}
apiJar publicApiIncludePatterns

artifacts {
    archives javadocJar
    archives sourcesJar
    archives apiJar
}

//////////////////
// Maven publish
publishing {
    publications {
        maven(MavenPublication) {
            artifactId = "aeguide"
            version = project.version

            artifact shadowJar
            artifact sourcesJar
            artifact javadocJar
            artifact apiJar
        }
    }
    repositories {
        maven {
            name = "Local"
            url = file("build/repo").toURI()
        }
    }
}

/////////////
// Spotless
spotless {

    java {
        target 'src/*/java/appeng/**/*.java'

        endWithNewline()
        indentWithSpaces()
        removeUnusedImports()
        toggleOffOn()
        eclipse().configFile 'codeformat/codeformat.xml'
        importOrderFile 'codeformat/ae2.importorder'

        // courtesy of diffplug/spotless#240
        // https://github.com/diffplug/spotless/issues/240#issuecomment-385206606
        custom 'noWildcardImports', {
            if (it.contains('*;\n')) {
                throw new Error('No wildcard imports allowed')
            }

            it
        }
        bumpThisNumberIfACustomStepChanges(1)
    }

   json {
        target 'src/*/resources/**/*.json'
        targetExclude 'src/generated/resources/**'
        var biomeConfig = it.new JsonExtension.BiomeJson(null)
        try {
            biomeConfig.downloadDir(new File(rootDir, ".gradle/biome").absolutePath)
        } catch (Exception ignored) {
        }
        addStep(biomeConfig.createStep())
        indentWithSpaces(2)
        endWithNewline()
    }
}
